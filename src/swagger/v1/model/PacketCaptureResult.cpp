/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketCaptureResult.h"

namespace swagger {
namespace v1 {
namespace model {

PacketCaptureResult::PacketCaptureResult()
{
    m_Id = "";
    m_Capture_id = "";
    m_Active = false;
    m_ActiveIsSet = false;
    m_State = "";
    m_Packets = 0L;
    m_Bytes = 0L;
    
}

PacketCaptureResult::~PacketCaptureResult()
{
}

void PacketCaptureResult::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketCaptureResult::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["capture_id"] = ModelBase::toJson(m_Capture_id);
    if(m_ActiveIsSet)
    {
        val["active"] = m_Active;
    }
    val["state"] = ModelBase::toJson(m_State);
    val["packets"] = m_Packets;
    val["bytes"] = m_Bytes;
    

    return val;
}

void PacketCaptureResult::fromJson(nlohmann::json& val)
{
    setId(val.at("id"));
    setCaptureId(val.at("capture_id"));
    if(val.find("active") != val.end())
    {
        setActive(val.at("active"));
    }
    setState(val.at("state"));
    setPackets(val.at("packets"));
    setBytes(val.at("bytes"));
    
}


std::string PacketCaptureResult::getId() const
{
    return m_Id;
}
void PacketCaptureResult::setId(std::string value)
{
    m_Id = value;
    
}
std::string PacketCaptureResult::getCaptureId() const
{
    return m_Capture_id;
}
void PacketCaptureResult::setCaptureId(std::string value)
{
    m_Capture_id = value;
    
}
bool PacketCaptureResult::isActive() const
{
    return m_Active;
}
void PacketCaptureResult::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}
bool PacketCaptureResult::activeIsSet() const
{
    return m_ActiveIsSet;
}
void PacketCaptureResult::unsetActive()
{
    m_ActiveIsSet = false;
}
std::string PacketCaptureResult::getState() const
{
    return m_State;
}
void PacketCaptureResult::setState(std::string value)
{
    m_State = value;
    
}
int64_t PacketCaptureResult::getPackets() const
{
    return m_Packets;
}
void PacketCaptureResult::setPackets(int64_t value)
{
    m_Packets = value;
    
}
int64_t PacketCaptureResult::getBytes() const
{
    return m_Bytes;
}
void PacketCaptureResult::setBytes(int64_t value)
{
    m_Bytes = value;
    
}

}
}
}

