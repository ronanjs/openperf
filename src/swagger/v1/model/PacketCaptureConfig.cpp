/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PacketCaptureConfig.h"

namespace swagger {
namespace v1 {
namespace model {

PacketCaptureConfig::PacketCaptureConfig()
{
    m_Mode = "";
    m_Buffer_wrap = false;
    m_Buffer_wrapIsSet = false;
    m_Buffer_size = 0L;
    m_Packet_size = 0;
    m_Packet_sizeIsSet = false;
    m_Filter = "";
    m_FilterIsSet = false;
    m_Start_trigger = "";
    m_Start_triggerIsSet = false;
    m_Stop_trigger = "";
    m_Stop_triggerIsSet = false;
    m_Duration = 0L;
    m_DurationIsSet = false;
    
}

PacketCaptureConfig::~PacketCaptureConfig()
{
}

void PacketCaptureConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json PacketCaptureConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["mode"] = ModelBase::toJson(m_Mode);
    if(m_Buffer_wrapIsSet)
    {
        val["buffer_wrap"] = m_Buffer_wrap;
    }
    val["buffer_size"] = m_Buffer_size;
    if(m_Packet_sizeIsSet)
    {
        val["packet_size"] = m_Packet_size;
    }
    if(m_FilterIsSet)
    {
        val["filter"] = ModelBase::toJson(m_Filter);
    }
    if(m_Start_triggerIsSet)
    {
        val["start_trigger"] = ModelBase::toJson(m_Start_trigger);
    }
    if(m_Stop_triggerIsSet)
    {
        val["stop_trigger"] = ModelBase::toJson(m_Stop_trigger);
    }
    if(m_DurationIsSet)
    {
        val["duration"] = m_Duration;
    }
    

    return val;
}

void PacketCaptureConfig::fromJson(nlohmann::json& val)
{
    setMode(val.at("mode"));
    if(val.find("buffer_wrap") != val.end())
    {
        setBufferWrap(val.at("buffer_wrap"));
    }
    setBufferSize(val.at("buffer_size"));
    if(val.find("packet_size") != val.end())
    {
        setPacketSize(val.at("packet_size"));
    }
    if(val.find("filter") != val.end())
    {
        setFilter(val.at("filter"));
        
    }
    if(val.find("start_trigger") != val.end())
    {
        setStartTrigger(val.at("start_trigger"));
        
    }
    if(val.find("stop_trigger") != val.end())
    {
        setStopTrigger(val.at("stop_trigger"));
        
    }
    if(val.find("duration") != val.end())
    {
        setDuration(val.at("duration"));
    }
    
}


std::string PacketCaptureConfig::getMode() const
{
    return m_Mode;
}
void PacketCaptureConfig::setMode(std::string value)
{
    m_Mode = value;
    
}
bool PacketCaptureConfig::isBufferWrap() const
{
    return m_Buffer_wrap;
}
void PacketCaptureConfig::setBufferWrap(bool value)
{
    m_Buffer_wrap = value;
    m_Buffer_wrapIsSet = true;
}
bool PacketCaptureConfig::bufferWrapIsSet() const
{
    return m_Buffer_wrapIsSet;
}
void PacketCaptureConfig::unsetBuffer_wrap()
{
    m_Buffer_wrapIsSet = false;
}
int64_t PacketCaptureConfig::getBufferSize() const
{
    return m_Buffer_size;
}
void PacketCaptureConfig::setBufferSize(int64_t value)
{
    m_Buffer_size = value;
    
}
int32_t PacketCaptureConfig::getPacketSize() const
{
    return m_Packet_size;
}
void PacketCaptureConfig::setPacketSize(int32_t value)
{
    m_Packet_size = value;
    m_Packet_sizeIsSet = true;
}
bool PacketCaptureConfig::packetSizeIsSet() const
{
    return m_Packet_sizeIsSet;
}
void PacketCaptureConfig::unsetPacket_size()
{
    m_Packet_sizeIsSet = false;
}
std::string PacketCaptureConfig::getFilter() const
{
    return m_Filter;
}
void PacketCaptureConfig::setFilter(std::string value)
{
    m_Filter = value;
    m_FilterIsSet = true;
}
bool PacketCaptureConfig::filterIsSet() const
{
    return m_FilterIsSet;
}
void PacketCaptureConfig::unsetFilter()
{
    m_FilterIsSet = false;
}
std::string PacketCaptureConfig::getStartTrigger() const
{
    return m_Start_trigger;
}
void PacketCaptureConfig::setStartTrigger(std::string value)
{
    m_Start_trigger = value;
    m_Start_triggerIsSet = true;
}
bool PacketCaptureConfig::startTriggerIsSet() const
{
    return m_Start_triggerIsSet;
}
void PacketCaptureConfig::unsetStart_trigger()
{
    m_Start_triggerIsSet = false;
}
std::string PacketCaptureConfig::getStopTrigger() const
{
    return m_Stop_trigger;
}
void PacketCaptureConfig::setStopTrigger(std::string value)
{
    m_Stop_trigger = value;
    m_Stop_triggerIsSet = true;
}
bool PacketCaptureConfig::stopTriggerIsSet() const
{
    return m_Stop_triggerIsSet;
}
void PacketCaptureConfig::unsetStop_trigger()
{
    m_Stop_triggerIsSet = false;
}
int64_t PacketCaptureConfig::getDuration() const
{
    return m_Duration;
}
void PacketCaptureConfig::setDuration(int64_t value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}
bool PacketCaptureConfig::durationIsSet() const
{
    return m_DurationIsSet;
}
void PacketCaptureConfig::unsetDuration()
{
    m_DurationIsSet = false;
}

}
}
}

