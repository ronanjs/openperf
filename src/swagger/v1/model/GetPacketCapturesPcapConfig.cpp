/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "GetPacketCapturesPcapConfig.h"

namespace swagger {
namespace v1 {
namespace model {

GetPacketCapturesPcapConfig::GetPacketCapturesPcapConfig()
{
    m_Packet_start = 0L;
    m_Packet_startIsSet = false;
    m_Packet_end = 0L;
    m_Packet_endIsSet = false;
    
}

GetPacketCapturesPcapConfig::~GetPacketCapturesPcapConfig()
{
}

void GetPacketCapturesPcapConfig::validate()
{
    // TODO: implement validation
}

nlohmann::json GetPacketCapturesPcapConfig::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["ids"] = jsonArray;
            }
    if(m_Packet_startIsSet)
    {
        val["packet_start"] = m_Packet_start;
    }
    if(m_Packet_endIsSet)
    {
        val["packet_end"] = m_Packet_end;
    }
    

    return val;
}

void GetPacketCapturesPcapConfig::fromJson(nlohmann::json& val)
{
    {
        m_Ids.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["ids"] )
        {
            m_Ids.push_back(item);
            
        }
    }
    if(val.find("packet_start") != val.end())
    {
        setPacketStart(val.at("packet_start"));
    }
    if(val.find("packet_end") != val.end())
    {
        setPacketEnd(val.at("packet_end"));
    }
    
}


std::vector<std::string>& GetPacketCapturesPcapConfig::getIds()
{
    return m_Ids;
}
int64_t GetPacketCapturesPcapConfig::getPacketStart() const
{
    return m_Packet_start;
}
void GetPacketCapturesPcapConfig::setPacketStart(int64_t value)
{
    m_Packet_start = value;
    m_Packet_startIsSet = true;
}
bool GetPacketCapturesPcapConfig::packetStartIsSet() const
{
    return m_Packet_startIsSet;
}
void GetPacketCapturesPcapConfig::unsetPacket_start()
{
    m_Packet_startIsSet = false;
}
int64_t GetPacketCapturesPcapConfig::getPacketEnd() const
{
    return m_Packet_end;
}
void GetPacketCapturesPcapConfig::setPacketEnd(int64_t value)
{
    m_Packet_end = value;
    m_Packet_endIsSet = true;
}
bool GetPacketCapturesPcapConfig::packetEndIsSet() const
{
    return m_Packet_endIsSet;
}
void GetPacketCapturesPcapConfig::unsetPacket_end()
{
    m_Packet_endIsSet = false;
}

}
}
}

