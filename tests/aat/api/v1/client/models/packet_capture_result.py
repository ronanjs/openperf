# coding: utf-8

"""
    OpenPerf API

    REST API interface for OpenPerf  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PacketCaptureResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'capture_id': 'str',
        'active': 'bool',
        'state': 'str',
        'packets': 'int',
        'bytes': 'int'
    }

    attribute_map = {
        'id': 'id',
        'capture_id': 'capture_id',
        'active': 'active',
        'state': 'state',
        'packets': 'packets',
        'bytes': 'bytes'
    }

    def __init__(self, id=None, capture_id=None, active=None, state=None, packets=None, bytes=None):  # noqa: E501
        """PacketCaptureResult - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._capture_id = None
        self._active = None
        self._state = None
        self._packets = None
        self._bytes = None
        self.discriminator = None

        self.id = id
        self.capture_id = capture_id
        if active is not None:
            self.active = active
        self.state = state
        self.packets = packets
        self.bytes = bytes

    @property
    def id(self):
        """Gets the id of this PacketCaptureResult.  # noqa: E501

        Unique capture result identifier  # noqa: E501

        :return: The id of this PacketCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PacketCaptureResult.

        Unique capture result identifier  # noqa: E501

        :param id: The id of this PacketCaptureResult.  # noqa: E501
        :type: str
        """
        self._id = id

    @property
    def capture_id(self):
        """Gets the capture_id of this PacketCaptureResult.  # noqa: E501

        Unique capture identifier that generated this result  # noqa: E501

        :return: The capture_id of this PacketCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._capture_id

    @capture_id.setter
    def capture_id(self, capture_id):
        """Sets the capture_id of this PacketCaptureResult.

        Unique capture identifier that generated this result  # noqa: E501

        :param capture_id: The capture_id of this PacketCaptureResult.  # noqa: E501
        :type: str
        """
        self._capture_id = capture_id

    @property
    def active(self):
        """Gets the active of this PacketCaptureResult.  # noqa: E501

        Indicates whether this object is currently capturing packets or not.   # noqa: E501

        :return: The active of this PacketCaptureResult.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PacketCaptureResult.

        Indicates whether this object is currently capturing packets or not.   # noqa: E501

        :param active: The active of this PacketCaptureResult.  # noqa: E501
        :type: bool
        """
        self._active = active

    @property
    def state(self):
        """Gets the state of this PacketCaptureResult.  # noqa: E501

        Capture state  # noqa: E501

        :return: The state of this PacketCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PacketCaptureResult.

        Capture state  # noqa: E501

        :param state: The state of this PacketCaptureResult.  # noqa: E501
        :type: str
        """
        self._state = state

    @property
    def packets(self):
        """Gets the packets of this PacketCaptureResult.  # noqa: E501

        Number of packets captured  # noqa: E501

        :return: The packets of this PacketCaptureResult.  # noqa: E501
        :rtype: int
        """
        return self._packets

    @packets.setter
    def packets(self, packets):
        """Sets the packets of this PacketCaptureResult.

        Number of packets captured  # noqa: E501

        :param packets: The packets of this PacketCaptureResult.  # noqa: E501
        :type: int
        """
        self._packets = packets

    @property
    def bytes(self):
        """Gets the bytes of this PacketCaptureResult.  # noqa: E501

        Number of bytes captured  # noqa: E501

        :return: The bytes of this PacketCaptureResult.  # noqa: E501
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this PacketCaptureResult.

        Number of bytes captured  # noqa: E501

        :param bytes: The bytes of this PacketCaptureResult.  # noqa: E501
        :type: int
        """
        self._bytes = bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketCaptureResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketCaptureResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
